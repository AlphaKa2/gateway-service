#서버 포트
server:
  port: 8000

springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
    operationsSorter: alpha # API 메서드 순서를 코드 정의 순으로 정렬
    path: /swagger-ui.html
    config-url: /v3/api-docs/swagger-config
    urls:
      - url: /user-service/v3/api-docs
        name: 유저 서비스
      - url: /auth-service/v3/api-docs
        name: 인증 서비스
      - url: /blog-service/v3/api-docs
        name: 블로그 서비스
      - url: /travel-service/v3/api-docs
        name: 여행 서비스

spring:
  application:
    name: gateway-service

  #클라우드
  cloud:
    gateway:

      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins:
              - 'http://localhost:3000'
            allow-credentials: true
            allowedHeaders: '*'
            allowedMethods:
              - PUT
              - GET
              - POST
              - DELETE
              - OPTIONS
              - PATCH


      routes:

        - id: user-service-with-authentication
          uri: lb://user-service
          predicates:
            - Path=/user-service/auth/**
          filters:
            - RewritePath=/user-service/auth/(?<remaining>.*), /${remaining}
            - name: JwtAuthenticationFilter
              args:
                loginPageRedirectionUrl: http://localhost:3000/login

        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/user-service/**
          filters:
            - RewritePath=/user-service/(?<remaining>.*), /${remaining}

        - id: auth-service-with-authentication
          uri: lb://auth-service
          predicates:
            - Path=/auth-service/auth/**
          filters:
            - RewritePath=/auth-service/auth/(?<remaining>.*), /${remaining}
            - name: JwtAuthenticationFilter
              args:
                loginPageRedirectionUrl: http://localhost:3000/login

        - id: auth-service
          uri: lb://auth-service
          predicates:
            - Path=/auth-service/**
          filters:
            - RewritePath=/auth-service/(?<remaining>.*), /${remaining}

        - id: blog-service-with-authentication
          uri: lb://blog-service
          predicates:
            - Path=/blog-service/auth/**

          filters:
            - RewritePath=/blog-service/auth/(?<remaining>.*), /${remaining}
            - name: JwtAuthenticationFilter
              args:
                loginPageRedirectionUrl: http://localhost:3000/login

        - id: blog-service
          uri: lb://blog-service
          predicates:
            - Path=/blog-service/**
          filters:
            - RewritePath=/blog-service/(?<remaining>.*), /${remaining}


        - id: travel-service-with-authentication
          uri: lb://travel-service
          predicates:
            - Path=/travel-service/auth/**
          filters:
            - RewritePath=/travel-service/auth/(?<remaining>.*), /${remaining}
            - name: JwtAuthenticationFilter
              args:
                loginPageRedirectionUrl: http://localhost:3000/login

        - id: travel-service
          uri: lb://travel-service
          predicates:
            - Path=/travel-service/**
          filters:
            - RewritePath=/travel-service/(?<remaining>.*), /${remaining}

        - id: ai-service-with-authentication
          uri: "${AI_URL}"
          predicates:
            - Path=/ai-service/auth/**
          filters:
            - RewritePath=/ai-service/auth/(?<remaining>.*), /${remaining}
            - name: JwtAuthenticationFilter
              args:
                loginPageRedirectionUrl: http://localhost:3000/login

        - id: ai-service
          uri: "${AI_URL}"
          predicates:
            - Path=/ai-service/**
          filters:
            - RewritePath=/ai-service/(?<remaining>.*), /${remaining}

#local 프로필
---
spring:
  config:
    activate:
      on-profile: local
    import: file:.env[.properties]

  cloud:
    config:
      enabled: false

#유레카
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: "${EUREKA_URL}"


#JWT 토큰
jwt:
  secretKey: "${JWT_SECRET_KEY}"



#develop 프로필
---

spring:
  config:
    activate:
      on-profile: develop

  #클라우드
  cloud:
    gateway:

      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins:
              - "${GATEWAY_URL}"
              - 'http://localhost:3000'
            allow-credentials: true
            allowedHeaders: '*'
            allowedMethods:
              - PUT
              - GET
              - POST
              - DELETE
              - OPTIONS
              - PATCH


eureka:
  client:
    enabled: false

#JWT 토큰
jwt:
  secretKey: "${JWT_SECRETKEY}"

logging:
  level:
    org.springframework.cloud.kubernetes.discovery: DEBUG
    org.springframework.cloud.gateway.filter: DEBUG  # 게이트웨이 필터 관련 로그
    org.springframework.cloud.gateway.filter.cors: TRACE
    org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping: DEBUG
    org.springframework.cloud.kubernetes: DEBUG
    org.springframework.http: DEBUG
    org.springframework.web.reactive.function.client: DEBUG
    reactor.netty.http.server: DEBUG   # Netty 서버 로그 디버그 레벨
    reactor.netty: INFO                # 다른 Netty 관련 로그는 INFO로 설정
    io.kubernetes.client: DEBUG